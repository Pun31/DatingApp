@inject HttpClient _client
@using DatingApp.Client.Components

<EditForm Model="@matchtype" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
    <div class="form-group">
        <label>Player1: </label>
        <div>
            <InputSelect @bind-Value="matchtype.PlayerId" class="form-control">
                <option value="">-- Select MatchType --</option>
                @if (Players != null)
                {
                    foreach (var player in Players)
                    {
<option value="@player.Id">@player.FirstName - @player.LastName  </option>}
}
            </InputSelect>
            <ValidationMessage For="@(() => matchtype.PlayerId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Player2: </label>
        <div>
            <InputSelect @bind-Value="matchtype.PlayerId" class="form-control">
                <option value="">-- Select MatchType --</option>
                @if (Players != null)
                {
                    foreach (var player in Players)
                    {
<option value="@player.Id">@player.FirstName - @player.LastName  </option>}
}
            </InputSelect>
            <ValidationMessage For="@(() => matchtype.PlayerId)" />
        </div>
    </div>

    <div class=" form-group">
        <label>Match: </label>
        <div>
            <InputText @bind-Value=" matchtype.Match" class="form-control" />
            <ValidationMessage For="@(() => matchtype.Match)" />
        </div>
    </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="matchtypes" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public MatchType matchtype { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Player> Players;

    protected async override Task OnInitializedAsync()
    {
        Players = await _client.GetFromJsonAsync<List<Player>>($"{Endpoints.PlayersEndpoint}");
    }
}
