@inject HttpClient _client
@using DatingApp.Client.Components

<EditForm Model="@consultation" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class=" form-group">
            <label>ConsultName: </label>
            <div>
                <InputText @bind-Value=" consultation.ConsultName" class="form-control" />
                <ValidationMessage For="@(() => consultation.ConsultName)" />
            </div>
        </div>

        @if (consultation.Id > 0)
        {
    <div class="form-group">
        <label>ConsultDate: </label>
        <div>
            <InputDate @bind-Value="@consultation.ConsultDate" class="form-control" />
            <ValidationMessage For="@(() => consultation.ConsultDate)" />
        </div>
    </div>}

        <div class=" form-group">
            <label>ConsultReport: </label>
            <div>
                <InputText @bind-Value=" consultation.ConsultReport" class="form-control" />
                <ValidationMessage For="@(() => consultation.ConsultReport)" />
            </div>
        </div>

        <div class="form-group">
            <label>PlayerId: </label>
            <div>
                <InputSelect @bind-Value="consultation.PlayerId" class="form-control">
                    <option value="">-- Select Consultation --</option>
                    @if (Players != null)
                    {
                        foreach (var player in Players)
                        {
    <option value="@player.Id">@player.FirstName - @player.LastName  </option>}
                        }
                </InputSelect>
                <ValidationMessage For="@(() => consultation.PlayerId)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="consultations" />

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Consultation consultation { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Player> Players;

    protected async override Task OnInitializedAsync()
    {
        Players = await _client.GetFromJsonAsync<List<Player>>($"{Endpoints.PlayersEndpoint}");
    }
}
